# Generated by Django 4.1.1 on 2022-09-20 14:18

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ("wagtailcore", "0076_modellogentry_revision"),
        ("taggit", "0005_auto_20220424_2025"),
        ("wagtailimages", "0024_index_image_file_hash"),
        ("home", "0002_create_homepage"),
    ]

    operations = [
        migrations.CreateModel(
            name="ArticlePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("team", models.CharField(max_length=1024)),
                ("pubtitle", models.CharField(max_length=1024)),
                ("annotation", wagtail.fields.RichTextField(blank=True)),
                (
                    "article_body",
                    wagtail.fields.StreamField(
                        [
                            ("linetext", wagtail.blocks.CharBlock()),
                            ("mtext", wagtail.blocks.TextBlock()),
                            ("richtext", wagtail.blocks.RichTextBlock()),
                            ("image", wagtail.images.blocks.ImageChooserBlock()),
                        ],
                        blank=True,
                        use_json_field=True,
                    ),
                ),
                ("issue", models.CharField(blank=True, max_length=512, null=True)),
                ("event", models.CharField(blank=True, max_length=1024, null=True)),
                ("pubdate", models.DateField(blank=True, null=True)),
                ("link_to_hard_copy", models.URLField(blank=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("taggit.tag",),
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=25)),
                ("fname", models.CharField(blank=True, max_length=25, null=True)),
                ("surname", models.CharField(max_length=25)),
                (
                    "academic_degree",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "personal_photo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="photo",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Author",
                "verbose_name_plural": "Authors",
            },
        ),
        migrations.CreateModel(
            name="ArticlePageTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="article_tags",
                        to="home.articlepage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="articlepage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="home.ArticlePageTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="ArticleToAuthor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[(None, ""), ("ZO", "з.о."), ("ZVO", "з.в.о.")],
                        default=None,
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "auth",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="articles",
                        to="home.author",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kmkauthors",
                        to="home.articlepage",
                    ),
                ),
            ],
            options={
                "unique_together": {("page", "auth")},
            },
        ),
    ]
